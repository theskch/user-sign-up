// Code generated by go-bindata.
// sources:
// html/templates/edit.html
// html/templates/forgotpass.html
// html/templates/homepage.html
// html/templates/login.html
// html/templates/resetpass.html
// html/templates/signup.html
// html/static/style.css
// DO NOT EDIT!

package assets

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)
type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _htmlTemplatesEditHtml = []byte(`<!DOCTYPE html>
<html lang="en">
    <head>
        <!-- Required meta tags -->
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
        <title>Edit</title>

        <!-- Bootstrap CSS -->
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta/css/bootstrap.min.css" integrity="sha384-/Y6pD6FV/Vv2HJnA6t+vslU6fwYXjCFtcEpHbNJ0lyAFsXTsjBbfaDjzALeQsN6M" crossorigin="anonymous">
        <link rel="stylesheet" href="/html/static/style.css">
    </head>
    <body>
        <div class="center">
            <h1> Edit profile </h1>
            <form method="POST" class="form">
                <label>Email:</label><br/>
                {{ if .user.GoogleAuth }}
                <input disabled="true" class="input" type="text" name="email" id="email" value="{{.user.Email}}"><br/> 
                {{ else }}
                <input class="input" type="text" name="email" id="email" value="{{.user.Email}}"><br/>
                {{ end }}
                <label>Full name:</label><br/>
                <input class="input" type="text" name="fullName" id="fullName" value="{{.user.FullName}}"><br/>
                <label>Address:</label><br/>
                <input class="input" type="text" name="address" id="address" value="{{.user.Address}}"><br/>
                <label>Telephone:</label><br/>
                <input class="input" type="text" name="telephone" id="telephone" value="{{.user.Telephone}}"><br/>
                <div class="error-message">{{ if .error }} {{.message}} {{ end }} </div>
                <div class="form-footer">
                    <input type="submit" value="Save & Continue"/>
                    <a href="/home"><button type="button">Cancel</button></a>
                </div>
            </form>
        </div>
    </body>

    <!-- Optional JavaScript -->
    <!-- jQuery first, then Popper.js, then Bootstrap JS -->
    <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.11.0/umd/popper.min.js" integrity="sha384-b/U6ypiBEHpOf/4+1nzFpr53nxSS+GLCkfwBdFNTxtclqqenISfwAzpKaMNFNmj4" crossorigin="anonymous"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta/js/bootstrap.min.js" integrity="sha384-h0AbiXch4ZDo7tp9hKZ4TsHbi047NrKGLO3SEJAg45jXxnGIfYzk4Si90RDIqNm1" crossorigin="anonymous"></script>
</html>`)

func htmlTemplatesEditHtmlBytes() ([]byte, error) {
	return _htmlTemplatesEditHtml, nil
}

func htmlTemplatesEditHtml() (*asset, error) {
	bytes, err := htmlTemplatesEditHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/templates/edit.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _htmlTemplatesForgotpassHtml = []byte(`<!DOCTYPE html>
<html lang="en">
    <head>
        <!-- Required meta tags -->
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
        <title>Forgot Pass</title>

        <!-- Bootstrap CSS -->
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta/css/bootstrap.min.css" integrity="sha384-/Y6pD6FV/Vv2HJnA6t+vslU6fwYXjCFtcEpHbNJ0lyAFsXTsjBbfaDjzALeQsN6M" crossorigin="anonymous">

        <link rel="stylesheet" href="/html/static/style.css">
        <style>
            .center{
                margin: auto;
                width: 60%;
                padding: 10px;
            }
            
        </style>
    </head>
    <body>
        <div class="center">
            <form method="POST" class="form">
                <label>Email:</label><br/>
                <input class="input" type="text" name="email" id="email"><br/>
                <div>
                    {{ if .success }}
                        <span> {{.message}}</span>
                    {{ end }}
                    {{ if .failed }}
                        <span style="color: red;"> {{.message}}</span>
                    {{ end }}
                </div>       
                <div class="form-footer">
                    <input type="submit" value="Send Reset Link"/>
                    <a href="/"><button type="button">Back to Login</button></a>
                </div>  
            </form>
        </div>
    </body>

    <!-- Optional JavaScript -->
    <!-- jQuery first, then Popper.js, then Bootstrap JS -->
    <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.11.0/umd/popper.min.js" integrity="sha384-b/U6ypiBEHpOf/4+1nzFpr53nxSS+GLCkfwBdFNTxtclqqenISfwAzpKaMNFNmj4" crossorigin="anonymous"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta/js/bootstrap.min.js" integrity="sha384-h0AbiXch4ZDo7tp9hKZ4TsHbi047NrKGLO3SEJAg45jXxnGIfYzk4Si90RDIqNm1" crossorigin="anonymous"></script>
</html>`)

func htmlTemplatesForgotpassHtmlBytes() ([]byte, error) {
	return _htmlTemplatesForgotpassHtml, nil
}

func htmlTemplatesForgotpassHtml() (*asset, error) {
	bytes, err := htmlTemplatesForgotpassHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/templates/forgotpass.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _htmlTemplatesHomepageHtml = []byte(`<!DOCTYPE html>
<html lang="en">
    <head>
        <!-- Required meta tags -->
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
        <title>Home</title>

        <!-- Bootstrap CSS -->
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta/css/bootstrap.min.css" integrity="sha384-/Y6pD6FV/Vv2HJnA6t+vslU6fwYXjCFtcEpHbNJ0lyAFsXTsjBbfaDjzALeQsN6M" crossorigin="anonymous">
        <script type="text/javascript"> 
            function preventBack() { 
                window.history.forward();  
            } 
              
            setTimeout("preventBack()", 0); 
              
            window.onunload = function () { null }; 
        </script>
        <link rel="stylesheet" href="/html/static/style.css">
    </head>
    <body>
        <div class="center">
            <h1> User profile </h1>
            <div class="info-container">
                <table class="table">
                    <tr>
                        <td>Email:</td>
                        <td class="info-value">{{.Email}}</td>
                    </tr>
                    <tr>
                        <td>Full name:</td>
                        <td class="info-value">{{.FullName}}</td>
                    </tr>
                    <tr>
                        <td>Address:</td>
                        <td class="info-value">{{.Address}}</td>
                    </tr>
                    <tr>
                        <td>Telephone:</td>
                        <td class="info-value">{{.Telephone}}</td>
                    </tr>
                </table>
            </div>
            <div class="additional-actions">
                <a href="/edit"><button style="width: 60px;">Edit</button></a> <a href="/logout"><button>Logout</button></a>
            </div>
        </div>
    </body>

    <!-- Optional JavaScript -->
    <!-- jQuery first, then Popper.js, then Bootstrap JS -->
    <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.11.0/umd/popper.min.js" integrity="sha384-b/U6ypiBEHpOf/4+1nzFpr53nxSS+GLCkfwBdFNTxtclqqenISfwAzpKaMNFNmj4" crossorigin="anonymous"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta/js/bootstrap.min.js" integrity="sha384-h0AbiXch4ZDo7tp9hKZ4TsHbi047NrKGLO3SEJAg45jXxnGIfYzk4Si90RDIqNm1" crossorigin="anonymous"></script>
</html>`)

func htmlTemplatesHomepageHtmlBytes() ([]byte, error) {
	return _htmlTemplatesHomepageHtml, nil
}

func htmlTemplatesHomepageHtml() (*asset, error) {
	bytes, err := htmlTemplatesHomepageHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/templates/homepage.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _htmlTemplatesLoginHtml = []byte(`<!DOCTYPE html>
<html lang="en">
    <head>
        <!-- Required meta tags -->
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
        <title>Login</title>

        <!-- Bootstrap CSS -->
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta/css/bootstrap.min.css" integrity="sha384-/Y6pD6FV/Vv2HJnA6t+vslU6fwYXjCFtcEpHbNJ0lyAFsXTsjBbfaDjzALeQsN6M" crossorigin="anonymous"> 
        <link rel="stylesheet" href="/html/static/style.css">
    </head>
    <body>
        <div class="center">
            <h1> Login </h1>
            <form method="POST" class="form">
                <label>Email:</label><br/>
                <input type="text" name="email" id="email" class="input"><br/>    
                <label>Password:</label><br/>
                <input type="password" name="password" id="password" class="input"><br/>
                <div class="error-message">{{ if .error }} {{.message}} {{ end }} </div>
                <div class="form-footer">
                    <input type="submit" value="Login"/> 
                    <a href="/googlelogin"><button type="button">Google login</button></a>
                </div>   
            </form>
        
            <div class="additional-actions">
                <a href="/usersignup"><button>New User Sign-Up</button></a>
                <a href="/forgetpassword"><button>Forgot Password</button></a>
            </div>
        </div>
    </body>

    <!-- Optional JavaScript -->
    <!-- jQuery first, then Popper.js, then Bootstrap JS -->
    <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.11.0/umd/popper.min.js" integrity="sha384-b/U6ypiBEHpOf/4+1nzFpr53nxSS+GLCkfwBdFNTxtclqqenISfwAzpKaMNFNmj4" crossorigin="anonymous"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta/js/bootstrap.min.js" integrity="sha384-h0AbiXch4ZDo7tp9hKZ4TsHbi047NrKGLO3SEJAg45jXxnGIfYzk4Si90RDIqNm1" crossorigin="anonymous"></script>
</html>`)

func htmlTemplatesLoginHtmlBytes() ([]byte, error) {
	return _htmlTemplatesLoginHtml, nil
}

func htmlTemplatesLoginHtml() (*asset, error) {
	bytes, err := htmlTemplatesLoginHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/templates/login.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _htmlTemplatesResetpassHtml = []byte(`<!DOCTYPE html>
<html lang="en">
    <head>
        <!-- Required meta tags -->
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
        <title>Reset Pass</title>

        <!-- Bootstrap CSS -->
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta/css/bootstrap.min.css" integrity="sha384-/Y6pD6FV/Vv2HJnA6t+vslU6fwYXjCFtcEpHbNJ0lyAFsXTsjBbfaDjzALeQsN6M" crossorigin="anonymous">

        <link rel="stylesheet" href="/html/static/style.css">
        <style>
            .center{
                margin: auto;
                width: 60%;
                padding: 10px;
            }
            
        </style>
    </head>
    <body>
        <div class="center">
            {{ if .failed }}
                <h4> Reset link has expired. <a href="/forgetpassword">Request new reset link</a> </h4>
            {{ else }}
            <form method="POST" class="form">
                <label>Pasword:</label><br/>
                <input class="input" type="password" name="password" id="password"><br/>   
                <div class="form-footer">
                    <input type="submit" value="Reset"/>   
                </div> 
            </form>
            {{ end }}
        </div>
    </body>

    <!-- Optional JavaScript -->
    <!-- jQuery first, then Popper.js, then Bootstrap JS -->
    <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.11.0/umd/popper.min.js" integrity="sha384-b/U6ypiBEHpOf/4+1nzFpr53nxSS+GLCkfwBdFNTxtclqqenISfwAzpKaMNFNmj4" crossorigin="anonymous"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta/js/bootstrap.min.js" integrity="sha384-h0AbiXch4ZDo7tp9hKZ4TsHbi047NrKGLO3SEJAg45jXxnGIfYzk4Si90RDIqNm1" crossorigin="anonymous"></script>
</html>`)

func htmlTemplatesResetpassHtmlBytes() ([]byte, error) {
	return _htmlTemplatesResetpassHtml, nil
}

func htmlTemplatesResetpassHtml() (*asset, error) {
	bytes, err := htmlTemplatesResetpassHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/templates/resetpass.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _htmlTemplatesSignupHtml = []byte(`<!DOCTYPE html>
<html lang="en">
    <head>
        <!-- Required meta tags -->
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
        <title>Sign up</title>

        <!-- Bootstrap CSS -->
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta/css/bootstrap.min.css" integrity="sha384-/Y6pD6FV/Vv2HJnA6t+vslU6fwYXjCFtcEpHbNJ0lyAFsXTsjBbfaDjzALeQsN6M" crossorigin="anonymous">
        <link rel="stylesheet" href="/html/static/style.css">
    </head>
    <body>
        <div class="center">
            <h1> Sign-up </h1>
            <form method="POST" class="form">
                <label>Email:</label><br/>
                <input type="text" name="email" id="email" class="input"><br/>    
                <label>Password:</label><br/>
                <input type="password" name="password" id="password" class="input"><br/>
                <div class="error-message">{{ if .error }} {{.message}} {{ end }} </div>
                <div class="form-footer">
                    <input type="submit" value="Sign up"/>
                    <a href="/googlelogin"><button type="button">Google sign up</button></a>
                </div>
            </form>
            <div class="additional-actions">
                <a href="/"><button>Existing User Login</button></a>
            </div>
        </div>
    </body>

    <!-- Optional JavaScript -->
    <!-- jQuery first, then Popper.js, then Bootstrap JS -->
    <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.11.0/umd/popper.min.js" integrity="sha384-b/U6ypiBEHpOf/4+1nzFpr53nxSS+GLCkfwBdFNTxtclqqenISfwAzpKaMNFNmj4" crossorigin="anonymous"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta/js/bootstrap.min.js" integrity="sha384-h0AbiXch4ZDo7tp9hKZ4TsHbi047NrKGLO3SEJAg45jXxnGIfYzk4Si90RDIqNm1" crossorigin="anonymous"></script>
</html>`)

func htmlTemplatesSignupHtmlBytes() ([]byte, error) {
	return _htmlTemplatesSignupHtml, nil
}

func htmlTemplatesSignupHtml() (*asset, error) {
	bytes, err := htmlTemplatesSignupHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/templates/signup.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _htmlStaticStyleCss = []byte(`h1, h2, h3, h4, h5 {
    text-align: center;
}

html {
    height: 100%;
}
body {
    height: 100%;
    overflow-y: auto;
}
.center {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    width: 100%;
    height: 100%;
}
.form {
    width: 400px;

}
.form .input {
        width: 100%;
}
.form-footer {
    margin-top: 30px;
    display: flex;
    justify-content: space-between;
    width: 100%;
}

.error-message {
    color: red;
    height: 20px;
    margin-top: 20px;
}
.additional-actions {
    margin-top: 30px;
    display: flex;
    justify-content: space-between;
    width: 400px;
}

.info-container {
    font-size: 20px;
}

.info-value {
    text-align: right;
}

.table {
    width: 400px;
}`)

func htmlStaticStyleCssBytes() ([]byte, error) {
	return _htmlStaticStyleCss, nil
}

func htmlStaticStyleCss() (*asset, error) {
	bytes, err := htmlStaticStyleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/static/style.css", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"html/templates/edit.html": htmlTemplatesEditHtml,
	"html/templates/forgotpass.html": htmlTemplatesForgotpassHtml,
	"html/templates/homepage.html": htmlTemplatesHomepageHtml,
	"html/templates/login.html": htmlTemplatesLoginHtml,
	"html/templates/resetpass.html": htmlTemplatesResetpassHtml,
	"html/templates/signup.html": htmlTemplatesSignupHtml,
	"html/static/style.css": htmlStaticStyleCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"html": &bintree{nil, map[string]*bintree{
		"static": &bintree{nil, map[string]*bintree{
			"style.css": &bintree{htmlStaticStyleCss, map[string]*bintree{}},
		}},
		"templates": &bintree{nil, map[string]*bintree{
			"edit.html": &bintree{htmlTemplatesEditHtml, map[string]*bintree{}},
			"forgotpass.html": &bintree{htmlTemplatesForgotpassHtml, map[string]*bintree{}},
			"homepage.html": &bintree{htmlTemplatesHomepageHtml, map[string]*bintree{}},
			"login.html": &bintree{htmlTemplatesLoginHtml, map[string]*bintree{}},
			"resetpass.html": &bintree{htmlTemplatesResetpassHtml, map[string]*bintree{}},
			"signup.html": &bintree{htmlTemplatesSignupHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

